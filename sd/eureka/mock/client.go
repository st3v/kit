// This file was generated by counterfeiter
package mock

import (
	"sync"

	"github.com/go-kit/kit/sd/eureka"
)

type Client struct {
	GetEntriesStub        func(name string) ([]string, error)
	getEntriesMutex       sync.RWMutex
	getEntriesArgsForCall []struct {
		name string
	}
	getEntriesReturns struct {
		result1 []string
		result2 error
	}
	WatchEntriesStub        func(name string, entries chan []string, done chan struct{})
	watchEntriesMutex       sync.RWMutex
	watchEntriesArgsForCall []struct {
		name    string
		entries chan []string
		done    chan struct{}
	}
	RegisterStub        func(service *eureka.Service) error
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		service *eureka.Service
	}
	registerReturns struct {
		result1 error
	}
	DeregisterStub        func(service *eureka.Service) error
	deregisterMutex       sync.RWMutex
	deregisterArgsForCall []struct {
		service *eureka.Service
	}
	deregisterReturns struct {
		result1 error
	}
}

func (fake *Client) GetEntries(name string) ([]string, error) {
	fake.getEntriesMutex.Lock()
	fake.getEntriesArgsForCall = append(fake.getEntriesArgsForCall, struct {
		name string
	}{name})
	fake.getEntriesMutex.Unlock()
	if fake.GetEntriesStub != nil {
		return fake.GetEntriesStub(name)
	} else {
		return fake.getEntriesReturns.result1, fake.getEntriesReturns.result2
	}
}

func (fake *Client) GetEntriesCallCount() int {
	fake.getEntriesMutex.RLock()
	defer fake.getEntriesMutex.RUnlock()
	return len(fake.getEntriesArgsForCall)
}

func (fake *Client) GetEntriesArgsForCall(i int) string {
	fake.getEntriesMutex.RLock()
	defer fake.getEntriesMutex.RUnlock()
	return fake.getEntriesArgsForCall[i].name
}

func (fake *Client) GetEntriesReturns(result1 []string, result2 error) {
	fake.GetEntriesStub = nil
	fake.getEntriesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *Client) WatchEntries(name string, entries chan []string, done chan struct{}) {
	fake.watchEntriesMutex.Lock()
	fake.watchEntriesArgsForCall = append(fake.watchEntriesArgsForCall, struct {
		name    string
		entries chan []string
		done    chan struct{}
	}{name, entries, done})
	fake.watchEntriesMutex.Unlock()
	if fake.WatchEntriesStub != nil {
		fake.WatchEntriesStub(name, entries, done)
	}
}

func (fake *Client) WatchEntriesCallCount() int {
	fake.watchEntriesMutex.RLock()
	defer fake.watchEntriesMutex.RUnlock()
	return len(fake.watchEntriesArgsForCall)
}

func (fake *Client) WatchEntriesArgsForCall(i int) (string, chan []string, chan struct{}) {
	fake.watchEntriesMutex.RLock()
	defer fake.watchEntriesMutex.RUnlock()
	return fake.watchEntriesArgsForCall[i].name, fake.watchEntriesArgsForCall[i].entries, fake.watchEntriesArgsForCall[i].done
}

func (fake *Client) Register(service *eureka.Service) error {
	fake.registerMutex.Lock()
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		service *eureka.Service
	}{service})
	fake.registerMutex.Unlock()
	if fake.RegisterStub != nil {
		return fake.RegisterStub(service)
	} else {
		return fake.registerReturns.result1
	}
}

func (fake *Client) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *Client) RegisterArgsForCall(i int) *eureka.Service {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return fake.registerArgsForCall[i].service
}

func (fake *Client) RegisterReturns(result1 error) {
	fake.RegisterStub = nil
	fake.registerReturns = struct {
		result1 error
	}{result1}
}

func (fake *Client) Deregister(service *eureka.Service) error {
	fake.deregisterMutex.Lock()
	fake.deregisterArgsForCall = append(fake.deregisterArgsForCall, struct {
		service *eureka.Service
	}{service})
	fake.deregisterMutex.Unlock()
	if fake.DeregisterStub != nil {
		return fake.DeregisterStub(service)
	} else {
		return fake.deregisterReturns.result1
	}
}

func (fake *Client) DeregisterCallCount() int {
	fake.deregisterMutex.RLock()
	defer fake.deregisterMutex.RUnlock()
	return len(fake.deregisterArgsForCall)
}

func (fake *Client) DeregisterArgsForCall(i int) *eureka.Service {
	fake.deregisterMutex.RLock()
	defer fake.deregisterMutex.RUnlock()
	return fake.deregisterArgsForCall[i].service
}

func (fake *Client) DeregisterReturns(result1 error) {
	fake.DeregisterStub = nil
	fake.deregisterReturns = struct {
		result1 error
	}{result1}
}

var _ eureka.Client = new(Client)
